package com.superwebanalytics.thrift.model;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class LinkedEdge implements
		org.apache.thrift.TBase<LinkedEdge, LinkedEdge._Fields>,
		java.io.Serializable, Cloneable {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"LinkedEdge");

	private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"source", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
	private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"target", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new LinkedEdgeStandardSchemeFactory());
		schemes.put(TupleScheme.class, new LinkedEdgeTupleSchemeFactory());
	}

	public PageID source; // required
	public PageID target; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SOURCE((short) 1, "source"), TARGET((short) 2, "target");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SOURCE
				return SOURCE;
			case 2: // TARGET
				return TARGET;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SOURCE,
				new org.apache.thrift.meta_data.FieldMetaData("source",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT,
								PageID.class)));
		tmpMap.put(_Fields.TARGET,
				new org.apache.thrift.meta_data.FieldMetaData("target",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT,
								PageID.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				LinkedEdge.class, metaDataMap);
	}

	public LinkedEdge() {
	}

	public LinkedEdge(PageID source, PageID target) {
		this();
		this.source = source;
		this.target = target;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public LinkedEdge(LinkedEdge other) {
		if (other.isSetSource()) {
			this.source = new PageID(other.source);
		}
		if (other.isSetTarget()) {
			this.target = new PageID(other.target);
		}
	}

	public LinkedEdge deepCopy() {
		return new LinkedEdge(this);
	}

	@Override
	public void clear() {
		this.source = null;
		this.target = null;
	}

	public PageID getSource() {
		return this.source;
	}

	public LinkedEdge setSource(PageID source) {
		this.source = source;
		return this;
	}

	public void unsetSource() {
		this.source = null;
	}

	/**
	 * Returns true if field source is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSource() {
		return this.source != null;
	}

	public void setSourceIsSet(boolean value) {
		if (!value) {
			this.source = null;
		}
	}

	public PageID getTarget() {
		return this.target;
	}

	public LinkedEdge setTarget(PageID target) {
		this.target = target;
		return this;
	}

	public void unsetTarget() {
		this.target = null;
	}

	/**
	 * Returns true if field target is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTarget() {
		return this.target != null;
	}

	public void setTargetIsSet(boolean value) {
		if (!value) {
			this.target = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SOURCE:
			if (value == null) {
				unsetSource();
			} else {
				setSource((PageID) value);
			}
			break;

		case TARGET:
			if (value == null) {
				unsetTarget();
			} else {
				setTarget((PageID) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SOURCE:
			return getSource();

		case TARGET:
			return getTarget();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SOURCE:
			return isSetSource();
		case TARGET:
			return isSetTarget();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof LinkedEdge)
			return this.equals((LinkedEdge) that);
		return false;
	}

	public boolean equals(LinkedEdge that) {
		if (that == null)
			return false;

		boolean this_present_source = true && this.isSetSource();
		boolean that_present_source = true && that.isSetSource();
		if (this_present_source || that_present_source) {
			if (!(this_present_source && that_present_source))
				return false;
			if (!this.source.equals(that.source))
				return false;
		}

		boolean this_present_target = true && this.isSetTarget();
		boolean that_present_target = true && that.isSetTarget();
		if (this_present_target || that_present_target) {
			if (!(this_present_target && that_present_target))
				return false;
			if (!this.target.equals(that.target))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(LinkedEdge other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		LinkedEdge typedOther = (LinkedEdge) other;

		lastComparison = Boolean.valueOf(isSetSource()).compareTo(
				typedOther.isSetSource());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSource()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.source, typedOther.source);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTarget()).compareTo(
				typedOther.isSetTarget());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTarget()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.target, typedOther.target);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("LinkedEdge(");
		boolean first = true;

		sb.append("source:");
		if (this.source == null) {
			sb.append("null");
		} else {
			sb.append(this.source);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("target:");
		if (this.target == null) {
			sb.append("null");
		} else {
			sb.append(this.target);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (source == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'source' was not present! Struct: "
							+ toString());
		}
		if (target == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'target' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class LinkedEdgeStandardSchemeFactory implements
			SchemeFactory {
		public LinkedEdgeStandardScheme getScheme() {
			return new LinkedEdgeStandardScheme();
		}
	}

	private static class LinkedEdgeStandardScheme extends
			StandardScheme<LinkedEdge> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				LinkedEdge struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SOURCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.source = new PageID();
						struct.source.read(iprot);
						struct.setSourceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // TARGET
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.target = new PageID();
						struct.target.read(iprot);
						struct.setTargetIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				LinkedEdge struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.source != null) {
				oprot.writeFieldBegin(SOURCE_FIELD_DESC);
				struct.source.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.target != null) {
				oprot.writeFieldBegin(TARGET_FIELD_DESC);
				struct.target.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class LinkedEdgeTupleSchemeFactory implements SchemeFactory {
		public LinkedEdgeTupleScheme getScheme() {
			return new LinkedEdgeTupleScheme();
		}
	}

	private static class LinkedEdgeTupleScheme extends TupleScheme<LinkedEdge> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				LinkedEdge struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			struct.source.write(oprot);
			struct.target.write(oprot);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				LinkedEdge struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.source = new PageID();
			struct.source.read(iprot);
			struct.setSourceIsSet(true);
			struct.target = new PageID();
			struct.target.read(iprot);
			struct.setTargetIsSet(true);
		}
	}

}
