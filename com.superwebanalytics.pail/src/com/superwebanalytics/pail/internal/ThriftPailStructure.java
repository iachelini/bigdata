package com.superwebanalytics.pail.internal;import org.apache.thrift.TBase;import org.apache.thrift.TDeserializer;import org.apache.thrift.TException;import org.apache.thrift.TSerializer;import com.backtype.hadoop.pail.PailStructure;public abstract class ThriftPailStructure<T extends Comparable<?>> //		// Java Generics allow the pail structure to be used for any Thrift		// object		implements PailStructure<T> {	private static final long serialVersionUID = 1L;	// TSerializer and TDeserializer are Thrift utilities for serializing	// objects to and from	// binary arrays	private transient TSerializer ser;	private transient TDeserializer des;	// The Thrift utilities are lazily built, constructed only when required	private TSerializer getSerializer() {		if (ser == null)			ser = new TSerializer();		return ser;	}	private TDeserializer getDeserializer() {		if (des == null)			des = new TDeserializer();		return des;	}	public byte[] serialize(T obj) {		try {			// The data object is cast to a basic Thrift object for			// serialization			return getSerializer().serialize((TBase<?, ?>) obj);		} catch (TException e) {			throw new RuntimeException(e);		}	}	public T deserialize(byte[] record) {		// A new data object is constructed prior to deserialization		T ret = createThriftObject();		try {			getDeserializer().deserialize((TBase<?, ?>) ret, record);		} catch (TException e) {			throw new RuntimeException(e);		}		return ret;	}	// The constructor of the data object must be implemented in the child class	protected abstract T createThriftObject();}